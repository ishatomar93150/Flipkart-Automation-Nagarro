Project Overview
The Flipkart Automation Project showcases automated testing of Flipkart's web application using Selenium WebDriver, TestNG, Apache POI, Log4j, and Extent Reports. By leveraging these technologies, the project aims to ensure the functionality and reliability of Flipkart's e-commerce platform through automated test execution and reporting.

Project Structure
src/main/java/com/flipkart/Flipkart_Automation:

HomePage.java: Defines the Page Object for the Flipkart home page.
LoginPage.java: Defines the Page Object for the Flipkart login page.
TestClass.java: Main test class responsible for WebDriver setup, Page Object initialization, and test execution.
src/test/java/com/flipkart/Flipkart_Automation:

Test cases: Contains various test cases covering different functionalities of Flipkart's application.
Drivers: Stores WebDriver executable files (chromedriver.exe, msedgedriver.exe).

config.properties: Configuration file to manage project-specific properties such as WebDriver executable paths.

extentreport.html: HTML report generated by Extent Reports for detailed test reporting.

TestRunner.xlsx: Excel file containing test data for test case execution.

Dependencies
Selenium WebDriver: Automates web browser interactions.
TestNG: Facilitates test case management and execution.
Apache POI: Handles interactions with Excel files for test data management.
Log4j: Manages logging for capturing runtime information and errors.
Extent Reports: Generates comprehensive HTML reports for test execution results.
How to Run
Clone the repository: Clone the project repository to your local machine.
Import into IDE: Import the project into your preferred Java IDE (Eclipse, IntelliJ, etc.).
Configure WebDriver: Set up the paths for WebDriver executables in the config.properties file.
Update test data: Modify the test data in the TestRunner.xlsx Excel file to match your test scenarios.
Run tests: Execute the desired test case as a TestNG test.
Logging
Log4j is integrated into the project to capture runtime logs. Log files are generated during test execution to provide insights into the testing process and any encountered issues.

Additional Notes
Customization: Feel free to customize and expand this project according to your specific testing requirements.
Continuous Integration: Integrate this project with CI/CD pipelines for automated testing in development workflows.
Maintenance: Regularly update dependencies and review test cases to ensure continued effectiveness and relevance.